//Dependências Maven
<dependencies>
    <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.8.8</version>
    </dependency>
    <dependency>
        <groupId>org.apache.httpcomponents.client5</groupId>
        <artifactId>httpclient5</artifactId>
        <version>5.1</version>
    </dependency>
</dependencies>

//Obter Marcas de Carros
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.apache.hc.client5.http.fluent.Request;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;

class Marca {
    int codigo;
    String nome;

    @Override
    public String toString() {
        return "Marca{" +
                "codigo=" + codigo +
                ", nome='" + nome + '\'' +
                '}';
    }
}

public class FipeApiClient {

    private static final String BASE_URL = "https://parallelum.com.br/fipe/api/v1/carros/marcas";

    public static List<Marca> getMarcas() throws IOException {
        String response = Request.get(BASE_URL).execute().returnContent().asString();
        Type listType = new TypeToken<List<Marca>>() {}.getType();
        return new Gson().fromJson(response, listType);
    }

    public static void main(String[] args) {
        try {
            List<Marca> marcas = getMarcas();
            marcas.forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
//Obter Modelos para uma Marca Selecionada
class Modelo {
    int codigo;
    String nome;

    @Override
    public String toString() {
        return "Modelo{" +
                "codigo=" + codigo +
                ", nome='" + nome + '\'' +
                '}';
    }
}

class Modelos {
    List<Modelo> modelos;

    @Override
    public String toString() {
        return "Modelos{" +
                "modelos=" + modelos +
                '}';
    }
}

public class FipeApiClient {

    private static final String BASE_URL = "https://parallelum.com.br/fipe/api/v1/carros/marcas";

    public static List<Modelo> getModelos(int marcaId) throws IOException {
        String url = BASE_URL + "/" + marcaId + "/modelos";
        String response = Request.get(url).execute().returnContent().asString();
        Type listType = new TypeToken<Modelos>() {}.getType();
        Modelos modelos = new Gson().fromJson(response, listType);
        return modelos.modelos;
    }

    public static void main(String[] args) {
        try {
            List<Marca> marcas = getMarcas();
            if (!marcas.isEmpty()) {
                List<Modelo> modelos = getModelos(marcas.get(0).codigo);
                modelos.forEach(System.out::println);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
// Obter Anos para um Modelo Selecionado
class Ano {
    String codigo;
    String nome;

    @Override
    public String toString() {
        return "Ano{" +
                "codigo='" + codigo + '\'' +
                ", nome='" + nome + '\'' +
                '}';
    }
}

public class FipeApiClient {

    private static final String BASE_URL = "https://parallelum.com.br/fipe/api/v1/carros/marcas";

    public static List<Ano> getAnos(int marcaId, int modeloId) throws IOException {
        String url = BASE_URL + "/" + marcaId + "/modelos/" + modeloId + "/anos";
        String response = Request.get(url).execute().returnContent().asString();
        Type listType = new TypeToken<List<Ano>>() {}.getType();
        return new Gson().fromJson(response, listType);
    }

    public static void main(String[] args) {
        try {
            List<Marca> marcas = getMarcas();
            if (!marcas.isEmpty()) {
                List<Modelo> modelos = getModelos(marcas.get(0).codigo);
                if (!modelos.isEmpty()) {
                    List<Ano> anos = getAnos(marcas.get(0).codigo, modelos.get(0).codigo);
                    anos.forEach(System.out::println);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
//Obter Preço para um Modelo e Ano Específico
class Preco {
    String Valor;
    String Marca;
    String Modelo;
    String AnoModelo;
    String Combustivel;
    String CodigoFipe;
    String MesReferencia;
    String TipoVeiculo;
    String SiglaCombustivel;

    @Override
    public String toString() {
        return "Preco{" +
                "Valor='" + Valor + '\'' +
                ", Marca='" + Marca + '\'' +
                ", Modelo='" + Modelo + '\'' +
                ", AnoModelo='" + AnoModelo + '\'' +
                ", Combustivel='" + Combustivel + '\'' +
                ", CodigoFipe='" + CodigoFipe + '\'' +
                ", MesReferencia='" + MesReferencia + '\'' +
                ", TipoVeiculo='" + TipoVeiculo + '\'' +
                ", SiglaCombustivel='" + SiglaCombustivel + '\'' +
                '}';
    }
}

public class FipeApiClient {

    private static final String BASE_URL = "https://parallelum.com.br/fipe/api/v1/carros/marcas";

    public static Preco getPreco(int marcaId, int modeloId, String anoId) throws IOException {
        String url = BASE_URL + "/" + marcaId + "/modelos/" + modeloId + "/anos/" + anoId;
        String response = Request.get(url).execute().returnContent().asString();
        return new Gson().fromJson(response, Preco.class);
    }

    public static void main(String[] args) {
        try {
            List<Marca> marcas = getMarcas();
            if (!marcas.isEmpty()) {
                int marcaId = marcas.get(0).codigo;
                List<Modelo> modelos = getModelos(marcaId);
                if (!modelos.isEmpty()) {
                    int modeloId = modelos.get(0).codigo;
                    List<Ano> anos = getAnos(marcaId, modeloId);
                    if (!anos.isEmpty()) {
                        String anoId = anos.get(0).codigo;
                        Preco preco = getPreco(marcaId, modeloId, anoId);
                        System.out.println(preco);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
